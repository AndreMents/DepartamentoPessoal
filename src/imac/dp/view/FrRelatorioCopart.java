/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imac.dp.view;

import imac.dp.dao.ConnectionFactory;
import imac.dp.dao.FuncionarioDao;
import imac.dp.model.Funcionario;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Suporte-01
 */
public class FrRelatorioCopart extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrRelatorioCopart
     */
    public FrRelatorioCopart() {
        initComponents();

    }

    public void cancelar() {
        EdCodFuncio.setText(null);
        EdNomeFuncio.setText(null);
        JDcDataInicial.setDate(null);
        JDcDataFinal.setDate(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        EdCodFuncio = new javax.swing.JTextField();
        BtBusca = new javax.swing.JButton();
        EdNomeFuncio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JDcDataInicial = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        JDcDataFinal = new com.toedter.calendar.JDateChooser();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        CbxNPago = new javax.swing.JCheckBox();
        CbxPago = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();

        setTitle("Relatórios de Parcelas - V1.0-20.0814");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Cód. Funcionário:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 15, -1, -1));

        EdCodFuncio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EdCodFuncioKeyPressed(evt);
            }
        });
        jPanel1.add(EdCodFuncio, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 60, -1));

        BtBusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-localizar-e-substituir-24 (1).png"))); // NOI18N
        BtBusca.setText("Buscar");
        BtBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtBuscaActionPerformed(evt);
            }
        });
        jPanel1.add(BtBusca, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 90, -1));
        jPanel1.add(EdNomeFuncio, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 240, -1));

        jLabel4.setText("Nome:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 45, -1, -1));

        jLabel2.setText("Filtrar Por:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, 20));
        jPanel1.add(JDcDataInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 120, -1));

        jLabel3.setText("Data Final:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 60, -1));
        jPanel1.add(JDcDataFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 120, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/print.png"))); // NOI18N
        jButton2.setText("Relatório");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 170, -1, -1));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/return_red.png"))); // NOI18N
        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit_black.png"))); // NOI18N
        jButton4.setText("Sair");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, 70, -1));

        CbxNPago.setText("Não Pago");
        CbxNPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbxNPagoActionPerformed(evt);
            }
        });
        jPanel1.add(CbxNPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        CbxPago.setText("Pago");
        CbxPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbxPagoActionPerformed(evt);
            }
        });
        jPanel1.add(CbxPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, -1, -1));

        jLabel5.setText("Data Inicial:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, -1));

        jTabbedPane1.addTab("Relatório Parcelas", jPanel1);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 310, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (CbxNPago.isSelected()) {//RELATÓRIO DE PARCELAS NÃO PAGAS

            if (EdCodFuncio.getText().equals("")) {//SE FOR EMITIR O RELATÓRIO SEM O CÓDIGO DE FUNCIONÁRIO
                //LISTA TODAS AS PARCELAS NÃO PAGAS
                try {

                    Connection con = ConnectionFactory.getConnection();

                    try {

                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaNPaga.jasper", null, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Atenção!\n Nenhum dado encontrado \n\n Código erro: " + e, "ATENÇÃO", JOptionPane.WARNING_MESSAGE);

                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrMenu.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (JDcDataFinal.getDate() == null || JDcDataFinal.getDate() == null) {//SE EMITIR O RELATÓRIO SEM O CAMPO DE DATAS PREENCHIDAS
                //EMITE RELATÓRIO POR CÓDIGO DE FUNCIONÁRIO SEM DATA INICIAL E FINAL
                try {
                    Connection con = ConnectionFactory.getConnection();
                    //JRDataSource data = new JREmptyDataSource();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());
                    map.put("FiltroCodFuncio", codFuncio);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaNPagaForUser.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {//SE OS CAMPOS DE DATA ESTIVEREM PREENCHIDOS
                //EMITE RELATÓRIO PELO CÓDIGO DO FUNCIONÁRIO E POR PERÍODO
                try {
                    Connection con = ConnectionFactory.getConnection();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());

                    java.util.Date dataIni = JDcDataInicial.getDate();
                    long dtInicial = dataIni.getTime();
                    java.sql.Date dateParcelaInicial = new java.sql.Date(dtInicial);

                    java.util.Date dataFin = JDcDataFinal.getDate();
                    long dtFinal = dataFin.getTime();
                    java.sql.Date dateParcelaFinal = new java.sql.Date(dtFinal);

                    map.put("FiltroCodFuncio", codFuncio);
                    map.put("FiltroDataInicial", dateParcelaInicial);
                    map.put("FiltroDataFinal", dateParcelaFinal);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaNPagaForUserForDate.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!\n" + ex, "Atenção", JOptionPane.WARNING_MESSAGE);
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else if (CbxPago.isSelected()) {//RELATÓRIO DE PARCELAS PAGAS
            if (EdCodFuncio.getText().equals("")) {//SE FOR EMITIR O RELATÓRIO SEM O CÓDIGO DE FUNCIONÁRIO
                //LISTA TODAS AS PARCELAS NÃO PAGAS
                try {

                    Connection con = ConnectionFactory.getConnection();

                    try {

                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaPaga.jasper", null, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Atenção!\n Nenhum dado encontrado \n\n Código erro: " + e, "ATENÇÃO", JOptionPane.WARNING_MESSAGE);

                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrMenu.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (JDcDataFinal.getDate() == null || JDcDataFinal.getDate() == null) {//SE EMITIR O RELATÓRIO SEM O CAMPO DE DATAS PREENCHIDAS
                //EMITE RELATÓRIO POR CÓDIGO DE FUNCIONÁRIO SEM DATA INICIAL E FINAL
                try {
                    Connection con = ConnectionFactory.getConnection();
                    //JRDataSource data = new JREmptyDataSource();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());
                    map.put("FiltroCodFuncio", codFuncio);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaPagaForUser.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {//SE OS CAMPOS DE DATA ESTIVEREM PREENCHIDOS
                //EMITE RELATÓRIO PELO CÓDIGO DO FUNCIONÁRIO E POR PERÍODO
                try {
                    Connection con = ConnectionFactory.getConnection();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());

                    java.util.Date dataIni = JDcDataInicial.getDate();
                    long dtInicial = dataIni.getTime();
                    java.sql.Date dateParcelaInicial = new java.sql.Date(dtInicial);

                    java.util.Date dataFin = JDcDataFinal.getDate();
                    long dtFinal = dataFin.getTime();
                    java.sql.Date dateParcelaFinal = new java.sql.Date(dtFinal);

                    map.put("FiltroCodFuncio", codFuncio);
                    map.put("FiltroDataInicial", dateParcelaInicial);
                    map.put("FiltroDataFinal", dateParcelaFinal);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaPagaForUserForDate.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {//LISTA TODAS AS PARCELAS PAGAS OU NÃO PAGAS
            if (EdCodFuncio.getText().equals("")) {//SE FOR EMITIR O RELATÓRIO SEM O CÓDIGO DE FUNCIONÁRIO
                //LISTA TODAS AS PARCELAS
                try {

                    Connection con = ConnectionFactory.getConnection();

                    try {

                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcela.jasper", null, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Atenção!\n Nenhum dado encontrado \n\n Código erro: " + e, "ATENÇÃO", JOptionPane.WARNING_MESSAGE);

                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrMenu.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (JDcDataFinal.getDate() == null || JDcDataFinal.getDate() == null) {//SE EMITIR O RELATÓRIO SEM O CAMPO DE DATAS PREENCHIDAS
                //EMITE RELATÓRIO POR CÓDIGO DE FUNCIONÁRIO SEM DATA INICIAL E FINAL
                try {
                    Connection con = ConnectionFactory.getConnection();
                    //JRDataSource data = new JREmptyDataSource();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());
                    map.put("FiltroCodFuncio", codFuncio);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaForUser.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {//SE OS CAMPOS DE DATA ESTIVEREM PREENCHIDOS
                //EMITE RELATÓRIO PELO CÓDIGO DO FUNCIONÁRIO E POR PERÍODO
                try {
                    Connection con = ConnectionFactory.getConnection();
                    Map<String, Object> map = new HashMap<String, Object>();
                    int codFuncio = Integer.parseInt(EdCodFuncio.getText());

                    java.util.Date dataIni = JDcDataInicial.getDate();
                    long dtInicial = dataIni.getTime();
                    java.sql.Date dateParcelaInicial = new java.sql.Date(dtInicial);

                    java.util.Date dataFin = JDcDataFinal.getDate();
                    long dtFinal = dataFin.getTime();
                    java.sql.Date dateParcelaFinal = new java.sql.Date(dtFinal);

                    map.put("FiltroCodFuncio", codFuncio);
                    map.put("FiltroDataInicial", dateParcelaInicial);
                    map.put("FiltroDataFinal", dateParcelaFinal);

                    try {
                        JasperPrint print = JasperFillManager.fillReport("\\\\C:\\Hardsearch\\MyReports\\relParcelaForUserForDate.jasper", map, con);
                        JasperViewer.viewReport(print, false);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Nenhum dado encontrado!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrRelatorioCopart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    public void validaCodigo() {
        FuncionarioDao pdao = new FuncionarioDao();

        if (EdCodFuncio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Informe o código do funcionário!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {

            try {
                if (pdao.checkCod(EdCodFuncio.getText())) {
                    listarFuncioCod();
                } else {
                    JOptionPane.showMessageDialog(null, "Funcionário não encontrado", "ERRO", JOptionPane.ERROR_MESSAGE);

                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrcadUsuario.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void listarFuncioCod() throws ClassNotFoundException {

        FuncionarioDao pdao = new FuncionarioDao();

        for (Funcionario fu : pdao.readFuncionarioForCod(EdCodFuncio.getText())) {
            EdNomeFuncio.setText(fu.getNomeFuncionario());
        }
    }

    private void BtBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtBuscaActionPerformed

        validaCodigo();

    }//GEN-LAST:event_BtBuscaActionPerformed

    private void EdCodFuncioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EdCodFuncioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            validaCodigo();
        }
    }//GEN-LAST:event_EdCodFuncioKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cancelar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void CbxNPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbxNPagoActionPerformed
        CbxPago.setSelected(false);
    }//GEN-LAST:event_CbxNPagoActionPerformed

    private void CbxPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbxPagoActionPerformed
        CbxNPago.setSelected(false);
    }//GEN-LAST:event_CbxPagoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtBusca;
    private javax.swing.JCheckBox CbxNPago;
    private javax.swing.JCheckBox CbxPago;
    private javax.swing.JTextField EdCodFuncio;
    private javax.swing.JTextField EdNomeFuncio;
    private com.toedter.calendar.JDateChooser JDcDataFinal;
    private com.toedter.calendar.JDateChooser JDcDataInicial;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
